#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValeriaDTOs

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct ValeriaDTOs.VALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable
// 0x01F8 (0x01F8 - 0x0000)
struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable final
{
public:
	uint8                                         BodyType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A84[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenderExpression;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuscularExpression;                                // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AnimSetId;                                         // 0x0014(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A85[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FGuid>             AnimSet_VariantSelections;                         // 0x0028(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  SkinToneId;                                        // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             SkinTone_VariantSelections;                        // 0x0088(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  EyesId;                                            // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Eyes_VariantSelections;                            // 0x00E8(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  HeadId;                                            // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Head_VariantSelections;                            // 0x0148(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  VoiceId;                                           // 0x0198(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Voice_VariantSelections;                           // 0x01A8(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable) == 0x000008, "Wrong alignment on FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable");
static_assert(sizeof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable) == 0x0001F8, "Wrong size on FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, BodyType) == 0x000000, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::BodyType' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, Thickness) == 0x000004, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::Thickness' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, Height) == 0x000008, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::Height' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, GenderExpression) == 0x00000C, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::GenderExpression' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, MuscularExpression) == 0x000010, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::MuscularExpression' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, AnimSetId) == 0x000014, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::AnimSetId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, AnimSet_VariantSelections) == 0x000028, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::AnimSet_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, SkinToneId) == 0x000078, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::SkinToneId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, SkinTone_VariantSelections) == 0x000088, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::SkinTone_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, EyesId) == 0x0000D8, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::EyesId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, Eyes_VariantSelections) == 0x0000E8, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::Eyes_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, HeadId) == 0x000138, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::HeadId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, Head_VariantSelections) == 0x000148, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::Head_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, VoiceId) == 0x000198, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::VoiceId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable, Voice_VariantSelections) == 0x0001A8, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable::Voice_VariantSelections' has a wrong offset!");

// ScriptStruct ValeriaDTOs.VALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile
// 0x07E0 (0x07E0 - 0x0000)
struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile final
{
public:
	struct FGuid                                  TorsoId;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Torso_VariantSelections;                           // 0x0010(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  LegsId;                                            // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Legs_VariantSelections;                            // 0x0070(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  HatId;                                             // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Hat_VariantSelections;                             // 0x00D0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  HairStyleId;                                       // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             HairStyle_VariantSelections;                       // 0x0130(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  FacialHairStyleId;                                 // 0x0180(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             FacialHairStyle_VariantSelections;                 // 0x0190(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  FaceMaskId;                                        // 0x01E0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             FaceMask_VariantSelections;                        // 0x01F0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  FaceTattooId;                                      // 0x0240(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             FaceTattoo_VariantSelections;                      // 0x0250(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  BodyTattooId;                                      // 0x02A0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             BodyTattoo_VariantSelections;                      // 0x02B0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  MakeupId;                                          // 0x0300(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Makeup_VariantSelections;                          // 0x0310(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  FaceComplexionId;                                  // 0x0360(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             FaceComplexion_VariantSelections;                  // 0x0370(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  BodyComplexionId;                                  // 0x03C0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             BodyComplexion_VariantSelections;                  // 0x03D0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  GliderId;                                          // 0x0420(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Glider_VariantSelections;                          // 0x0430(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  GliderTrailId;                                     // 0x0480(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             GliderTrail_VariantSelections;                     // 0x0490(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  NameplateId;                                       // 0x04E0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Nameplate_VariantSelections;                       // 0x04F0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  AxeSkinId;                                         // 0x0540(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             AxeSkin_VariantSelections;                         // 0x0550(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  PickAxeSkinId;                                     // 0x05A0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             PickAxeSkin_VariantSelections;                     // 0x05B0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  WateringCanSkinId;                                 // 0x0600(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             WateringCanSkin_VariantSelections;                 // 0x0610(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  FishingRodSkinId;                                  // 0x0660(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             FishingRodSkin_VariantSelections;                  // 0x0670(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  HoeSkinId;                                         // 0x06C0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             HoeSkin_VariantSelections;                         // 0x06D0(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  BowSkinId;                                         // 0x0720(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             BowSkin_VariantSelections;                         // 0x0730(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FGuid                                  PetId;                                             // 0x0780(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGuid>             Pet_VariantSelections;                             // 0x0790(0x0050)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile) == 0x000008, "Wrong alignment on FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile");
static_assert(sizeof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile) == 0x0007E0, "Wrong size on FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, TorsoId) == 0x000000, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::TorsoId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Torso_VariantSelections) == 0x000010, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Torso_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, LegsId) == 0x000060, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::LegsId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Legs_VariantSelections) == 0x000070, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Legs_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, HatId) == 0x0000C0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::HatId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Hat_VariantSelections) == 0x0000D0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Hat_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, HairStyleId) == 0x000120, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::HairStyleId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, HairStyle_VariantSelections) == 0x000130, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::HairStyle_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FacialHairStyleId) == 0x000180, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FacialHairStyleId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FacialHairStyle_VariantSelections) == 0x000190, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FacialHairStyle_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FaceMaskId) == 0x0001E0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FaceMaskId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FaceMask_VariantSelections) == 0x0001F0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FaceMask_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FaceTattooId) == 0x000240, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FaceTattooId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FaceTattoo_VariantSelections) == 0x000250, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FaceTattoo_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, BodyTattooId) == 0x0002A0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::BodyTattooId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, BodyTattoo_VariantSelections) == 0x0002B0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::BodyTattoo_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, MakeupId) == 0x000300, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::MakeupId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Makeup_VariantSelections) == 0x000310, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Makeup_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FaceComplexionId) == 0x000360, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FaceComplexionId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FaceComplexion_VariantSelections) == 0x000370, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FaceComplexion_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, BodyComplexionId) == 0x0003C0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::BodyComplexionId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, BodyComplexion_VariantSelections) == 0x0003D0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::BodyComplexion_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, GliderId) == 0x000420, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::GliderId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Glider_VariantSelections) == 0x000430, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Glider_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, GliderTrailId) == 0x000480, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::GliderTrailId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, GliderTrail_VariantSelections) == 0x000490, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::GliderTrail_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, NameplateId) == 0x0004E0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::NameplateId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Nameplate_VariantSelections) == 0x0004F0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Nameplate_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, AxeSkinId) == 0x000540, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::AxeSkinId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, AxeSkin_VariantSelections) == 0x000550, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::AxeSkin_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, PickAxeSkinId) == 0x0005A0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::PickAxeSkinId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, PickAxeSkin_VariantSelections) == 0x0005B0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::PickAxeSkin_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, WateringCanSkinId) == 0x000600, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::WateringCanSkinId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, WateringCanSkin_VariantSelections) == 0x000610, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::WateringCanSkin_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FishingRodSkinId) == 0x000660, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FishingRodSkinId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, FishingRodSkin_VariantSelections) == 0x000670, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::FishingRodSkin_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, HoeSkinId) == 0x0006C0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::HoeSkinId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, HoeSkin_VariantSelections) == 0x0006D0, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::HoeSkin_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, BowSkinId) == 0x000720, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::BowSkinId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, BowSkin_VariantSelections) == 0x000730, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::BowSkin_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, PetId) == 0x000780, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::PetId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile, Pet_VariantSelections) == 0x000790, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile::Pet_VariantSelections' has a wrong offset!");

// ScriptStruct ValeriaDTOs.VALDTOS_CharacterCustomizationLoadout_PersistDTO
// 0x09E8 (0x09E8 - 0x0000)
struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO final
{
public:
	struct FGuid                                  LoadoutId;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable StableLoadout;                                     // 0x0010(0x01F8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile VolatileLoadout;                                   // 0x0208(0x07E0)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO) == 0x000008, "Wrong alignment on FVALDTOS_CharacterCustomizationLoadout_PersistDTO");
static_assert(sizeof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO) == 0x0009E8, "Wrong size on FVALDTOS_CharacterCustomizationLoadout_PersistDTO");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO, LoadoutId) == 0x000000, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO::LoadoutId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO, StableLoadout) == 0x000010, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO::StableLoadout' has a wrong offset!");
static_assert(offsetof(FVALDTOS_CharacterCustomizationLoadout_PersistDTO, VolatileLoadout) == 0x000208, "Member 'FVALDTOS_CharacterCustomizationLoadout_PersistDTO::VolatileLoadout' has a wrong offset!");

// ScriptStruct ValeriaDTOs.VALDTOS_MetaCharacterFormat
// 0x0A28 (0x0A28 - 0x0000)
struct FVALDTOS_MetaCharacterFormat final
{
public:
	struct FGuid                                  UserAccountId;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreferredName;                                     // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Stable Loadout_Stable;                                    // 0x0040(0x01F8)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO_Volatile Loadout_Volatile;                                  // 0x0238(0x07E0)(BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FVALDTOS_CharacterCustomizationLoadout_PersistDTO> SavedLoadouts;                                     // 0x0A18(0x0010)(BlueprintVisible, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDTOS_MetaCharacterFormat) == 0x000008, "Wrong alignment on FVALDTOS_MetaCharacterFormat");
static_assert(sizeof(FVALDTOS_MetaCharacterFormat) == 0x000A28, "Wrong size on FVALDTOS_MetaCharacterFormat");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, UserAccountId) == 0x000000, "Member 'FVALDTOS_MetaCharacterFormat::UserAccountId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, CharacterId) == 0x000010, "Member 'FVALDTOS_MetaCharacterFormat::CharacterId' has a wrong offset!");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, CharacterName) == 0x000020, "Member 'FVALDTOS_MetaCharacterFormat::CharacterName' has a wrong offset!");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, PreferredName) == 0x000030, "Member 'FVALDTOS_MetaCharacterFormat::PreferredName' has a wrong offset!");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, Loadout_Stable) == 0x000040, "Member 'FVALDTOS_MetaCharacterFormat::Loadout_Stable' has a wrong offset!");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, Loadout_Volatile) == 0x000238, "Member 'FVALDTOS_MetaCharacterFormat::Loadout_Volatile' has a wrong offset!");
static_assert(offsetof(FVALDTOS_MetaCharacterFormat, SavedLoadouts) == 0x000A18, "Member 'FVALDTOS_MetaCharacterFormat::SavedLoadouts' has a wrong offset!");

}

