#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6Imposters

#include "Basic.hpp"

#include "S6Imposters_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class S6Imposters.S6ImpostersBakePreset
// 0x0090 (0x00C0 - 0x0030)
class US6ImpostersBakePreset final : public UDataAsset
{
public:
	class FString                                 StaticMeshName;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaterialName;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PreviewMeshOffset;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ES6_ImposterLayoutType                        ImposterLayoutType;                                // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D2[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FramesSingleAxis;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrthographic;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D3[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraDistance;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureResolution;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureLOD;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureUseMaxLOD;                                 // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D4[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ES6_ImposterBakeType>                  MapsToBake;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCombineBaseColorAndOpacity;                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombineNormalAndDepth;                            // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D5[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextureResolution;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeFakeAO;                                       // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D6[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConstantRoughness;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SubsurfaceColor;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6ImpostersBakePreset">();
	}
	static class US6ImpostersBakePreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6ImpostersBakePreset>();
	}
};
static_assert(alignof(US6ImpostersBakePreset) == 0x000008, "Wrong alignment on US6ImpostersBakePreset");
static_assert(sizeof(US6ImpostersBakePreset) == 0x0000C0, "Wrong size on US6ImpostersBakePreset");
static_assert(offsetof(US6ImpostersBakePreset, StaticMeshName) == 0x000030, "Member 'US6ImpostersBakePreset::StaticMeshName' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, MaterialName) == 0x000040, "Member 'US6ImpostersBakePreset::MaterialName' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, TextureName) == 0x000050, "Member 'US6ImpostersBakePreset::TextureName' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, PreviewMeshOffset) == 0x000060, "Member 'US6ImpostersBakePreset::PreviewMeshOffset' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, bCastShadow) == 0x000070, "Member 'US6ImpostersBakePreset::bCastShadow' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, ImposterLayoutType) == 0x000071, "Member 'US6ImpostersBakePreset::ImposterLayoutType' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, FramesSingleAxis) == 0x000074, "Member 'US6ImpostersBakePreset::FramesSingleAxis' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, bOrthographic) == 0x000078, "Member 'US6ImpostersBakePreset::bOrthographic' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, CameraDistance) == 0x00007C, "Member 'US6ImpostersBakePreset::CameraDistance' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, CaptureResolution) == 0x000080, "Member 'US6ImpostersBakePreset::CaptureResolution' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, CaptureLOD) == 0x000084, "Member 'US6ImpostersBakePreset::CaptureLOD' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, bCaptureUseMaxLOD) == 0x000088, "Member 'US6ImpostersBakePreset::bCaptureUseMaxLOD' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, MapsToBake) == 0x000090, "Member 'US6ImpostersBakePreset::MapsToBake' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, bCombineBaseColorAndOpacity) == 0x0000A0, "Member 'US6ImpostersBakePreset::bCombineBaseColorAndOpacity' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, bCombineNormalAndDepth) == 0x0000A1, "Member 'US6ImpostersBakePreset::bCombineNormalAndDepth' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, TextureResolution) == 0x0000A4, "Member 'US6ImpostersBakePreset::TextureResolution' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, bBakeFakeAO) == 0x0000A8, "Member 'US6ImpostersBakePreset::bBakeFakeAO' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, ConstantRoughness) == 0x0000AC, "Member 'US6ImpostersBakePreset::ConstantRoughness' has a wrong offset!");
static_assert(offsetof(US6ImpostersBakePreset, SubsurfaceColor) == 0x0000B0, "Member 'US6ImpostersBakePreset::SubsurfaceColor' has a wrong offset!");

}

