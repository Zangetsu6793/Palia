#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6ABTests

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct S6ABTests.S6ABTestVariant
// 0x0018 (0x0018 - 0x0000)
struct FS6ABTestVariant final
{
public:
	class FString                                 VariantIdentifier;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6ABTestVariant) == 0x000008, "Wrong alignment on FS6ABTestVariant");
static_assert(sizeof(FS6ABTestVariant) == 0x000018, "Wrong size on FS6ABTestVariant");
static_assert(offsetof(FS6ABTestVariant, VariantIdentifier) == 0x000000, "Member 'FS6ABTestVariant::VariantIdentifier' has a wrong offset!");
static_assert(offsetof(FS6ABTestVariant, Value) == 0x000010, "Member 'FS6ABTestVariant::Value' has a wrong offset!");

// ScriptStruct S6ABTests.ABTestAssignment
// 0x0010 (0x0010 - 0x0000)
struct FABTestAssignment final
{
public:
	class US6ABTest*                              Test;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assignment;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE6[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FABTestAssignment) == 0x000008, "Wrong alignment on FABTestAssignment");
static_assert(sizeof(FABTestAssignment) == 0x000010, "Wrong size on FABTestAssignment");
static_assert(offsetof(FABTestAssignment, Test) == 0x000000, "Member 'FABTestAssignment::Test' has a wrong offset!");
static_assert(offsetof(FABTestAssignment, Assignment) == 0x000008, "Member 'FABTestAssignment::Assignment' has a wrong offset!");

// ScriptStruct S6ABTests.ABTestAssignmentArray
// 0x0010 (0x0010 - 0x0000)
struct FABTestAssignmentArray final
{
public:
	TArray<struct FABTestAssignment>              Assignments;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FABTestAssignmentArray) == 0x000008, "Wrong alignment on FABTestAssignmentArray");
static_assert(sizeof(FABTestAssignmentArray) == 0x000010, "Wrong size on FABTestAssignmentArray");
static_assert(offsetof(FABTestAssignmentArray, Assignments) == 0x000000, "Member 'FABTestAssignmentArray::Assignments' has a wrong offset!");

// ScriptStruct S6ABTests.S6ABTestVariantDistribution
// 0x0008 (0x0008 - 0x0000)
struct FS6ABTestVariantDistribution final
{
public:
	int32                                         BasisPoints;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariantIndex;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6ABTestVariantDistribution) == 0x000004, "Wrong alignment on FS6ABTestVariantDistribution");
static_assert(sizeof(FS6ABTestVariantDistribution) == 0x000008, "Wrong size on FS6ABTestVariantDistribution");
static_assert(offsetof(FS6ABTestVariantDistribution, BasisPoints) == 0x000000, "Member 'FS6ABTestVariantDistribution::BasisPoints' has a wrong offset!");
static_assert(offsetof(FS6ABTestVariantDistribution, VariantIndex) == 0x000004, "Member 'FS6ABTestVariantDistribution::VariantIndex' has a wrong offset!");

// ScriptStruct S6ABTests.S6ABTestDistribution
// 0x0018 (0x0018 - 0x0000)
struct FS6ABTestDistribution final
{
public:
	class US6ABTest*                              Test;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FS6ABTestVariantDistribution>   Buckets;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6ABTestDistribution) == 0x000008, "Wrong alignment on FS6ABTestDistribution");
static_assert(sizeof(FS6ABTestDistribution) == 0x000018, "Wrong size on FS6ABTestDistribution");
static_assert(offsetof(FS6ABTestDistribution, Test) == 0x000000, "Member 'FS6ABTestDistribution::Test' has a wrong offset!");
static_assert(offsetof(FS6ABTestDistribution, Buckets) == 0x000008, "Member 'FS6ABTestDistribution::Buckets' has a wrong offset!");

}

